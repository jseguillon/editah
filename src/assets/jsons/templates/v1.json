[ { "name": "üìö pod init containers", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n    volumeMounts:\n    - name: workdir\n      mountPath: /usr/share/nginx/html\n  # These containers are run during pod initialization\n  initContainers:\n  - name: install\n    image: busybox\n    command:\n    - wget\n    - \"-O\"\n    - \"/work-dir/index.html\"\n    - http://info.cern.ch\n    volumeMounts:\n    - name: workdir\n      mountPath: \"/work-dir\"\n  dnsPolicy: Default\n  volumes:\n  - name: workdir\n    emptyDir: {}\n" } ,
  { "name": "üìö pod configuration - configmap env variables", "content":"---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-test-full-configmap\nspec:\n  containers:\n    - name: test-container\n      image: k8s.gcr.io/busybox\n      command: [ \"/bin/sh\", \"-c\", \"env\" ]\n      envFrom:\n        - configMapRef:\n            name: myapp-one-config  \n  restartPolicy: Never\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-test-specific-keys-two-configmaps\nspec:\n  containers:\n    - name: test-container\n      image: k8s.gcr.io/busybox\n      command: [ \"/bin/echo\", \"$(SPECIAL_LEVEL_KEY) $(LOG_LEVEL)\" ]\n      env:\n        - name: SPECIAL_LEVEL_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: myapp-one-config\n              key: special.how\n        - name: LOG_LEVEL\n          valueFrom:\n            configMapKeyRef:\n              name: myapp-other-config\n              key: log_level\n  restartPolicy: Never\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: myapp-one-config\n  namespace: default\ndata:\n  special.how: very\n  other: data\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: myapp-other-config\n  namespace: default\ndata:\n  log_level: INFO"},
  { "name": "üìö pod configuration - configmap volumes mount", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-test-configmap-volume-pod\nspec:\n  containers:\n    - name: test-container\n      image: k8s.gcr.io/busybox\n      command: [ \"/bin/sh\", \"-c\", \"ls /etc/config/\" ]\n      volumeMounts:\n      - name: config-volume\n        mountPath: /etc/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: myapp-one-config\n  restartPolicy: Never\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-test-specific-key-pod\nspec:\n  containers:\n    - name: test-container\n      image: k8s.gcr.io/busybox\n      command: [ \"/bin/sh\",\"-c\",\"cat /etc/config/keys\" ]\n      volumeMounts:\n      - name: config-volume\n        mountPath: /etc/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: myapp-one-config\n        items:\n        - key: special.how\n          path: keys\n  restartPolicy: Never\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: myapp-one-config\n  namespace: default\ndata:\n  special.how: very\n  other: data\n"},
  { "name": "üìö pod lifecycle - preStart & postStart", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  containers:\n  - name: lifecycle-demo-container\n    image: nginx\n    lifecycle:\n      postStart:\n        exec:\n          command: [\"/bin/sh\", \"-c\", \"echo Hello from the postStart handler > /usr/share/message\"]\n      preStop:\n        exec:\n          command: [\"/bin/sh\",\"-c\",\"nginx -s quit; while killall -0 nginx; do sleep 1; done\"]\n" } ,
  { "name": "üìö pod scheduling - pod with pod affinitys preferred & required", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod-affinity\nspec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: security\n            operator: In\n            values:\n            - S1\n        topologyKey: topology.kubernetes.io/zone\n    podAntiAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 100\n        podAffinityTerm:\n          labelSelector:\n            matchExpressions:\n            - key: security\n              operator: In\n              values:\n              - S2\n          topologyKey: topology.kubernetes.io/zone\n  containers:\n  - name: with-pod-affinity\n    image: k8s.gcr.io/pause:2.0\n" },
  { "name": "üìö pod scheduling - 1.21 alpha - namespace selector affinitys preferred & required", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod-affinity-ns-selector\nspec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: security\n            operator: In\n            values:\n            - S1\n        topologyKey: topology.kubernetes.io/zone\n        namespaceSelector: \n            matchExpressions:\n            - key: namespace-label\n              operator: In\n              values:\n              - value1\n          \n    podAntiAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 100\n        podAffinityTerm:\n          labelSelector:\n            matchExpressions:\n            - key: security\n              operator: In\n              values:\n              - S2\n          topologyKey: topology.kubernetes.io/zone\n          namespaceSelector: \n              matchExpressions:\n              - key: namespace-label\n                operator: In\n                values:\n                - value1          \n  containers:\n  - name: with-pod-affinity\n    image: k8s.gcr.io/pause:2.0\n"},
  { "name": "üìö pod scheduling - node affinitys preferred & required", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-preferred-pod\nspec:\n  affinity:\n    nodeAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        preference:\n          matchExpressions:\n          - key: disktype\n            operator: In\n            values:\n            - ssd          \n  containers:\n  - name: nginx\n    image: nginx\n    imagePullPolicy: IfNotPresent\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-required-pod\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: disktype\n            operator: In\n            values:\n            - ssd            \n  containers:\n  - name: nginx\n    image: nginx\n    imagePullPolicy: IfNotPresent\n" } ,
  { "name": "üìö pod scheduling - attach to node name", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  nodeName: foo-node\n  containers:\n  - name: nginx\n    image: nginx\n    imagePullPolicy: IfNotPresent" } ,
  { "name": "üìö pod scheduling - taints and tolerations", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-test\n  labels:\n    env: test\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    imagePullPolicy: IfNotPresent\n  tolerations:\n  - key: \"example-key\"\n    operator: \"Exists\"\n    effect: \"NoSchedule\"\n  - key: \"key1\"\n    operator: \"Equal\"\n    value: \"value2\"\n    effect: \"NoExecute\"\n    tolerationSeconds: 3600\n# Taint based eviction (stable v1.18)\n  - key: \"node.kubernetes.io/unreachable\"\n    operator: \"Exists\"\n    effect: \"NoExecute\"\n    tolerationSeconds: 6000\n# node.kubernetes.io/not-ready\n# node.kubernetes.io/unreachable\n# node.kubernetes.io/out-of-disk\n# node.kubernetes.io/memory-pressure\n# node.kubernetes.io/disk-pressure\n# node.kubernetes.io/network-unavailable\n# node.kubernetes.io/unschedulable\n# node.cloudprovider.kubernetes.io/uninitialized\n"},
  { "name": "üìö pod access - projected service account token", "content": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: myapp-robot\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-test-pod\nspec:\n  containers:\n  - image: k8s.gcr.io/busybox\n    name: test-pod\n    command: [ \"/bin/sh\", \"-c\", \"cat /var/run/secrets/tokens/vault-token\" ]\n    volumeMounts:\n    - mountPath: /var/run/secrets/tokens\n      name: vault-token\n  serviceAccountName: myapp-robot\n  volumes:\n  - name: vault-token\n    projected:\n      sources:\n      - serviceAccountToken:\n          path: vault-token\n          expirationSeconds: 7200\n          audience: vault\n"},
  { "name": "üìö pod access - api service account", "content": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: myapp-api-access\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-test-api-pod\nspec:\n  containers:\n  - image: alpine:latest\n    command: [ \"/bin/sh\", \"-c\", \" apk --update add curl; curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt --header \\\"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\\\" -X GET https://kubernetes.default.svc/api\" ]\n    name: test\n  serviceAccountName: myapp-api-access\n"},
  { "name": "üìö pod images - pull secrets", "content": "---\n# Create secret with :\n# kubectl create secret docker-registry <name> --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL\n# or \n# kubectl create secret generic regcred --from-file=.dockerconfigjson=<path/to/.docker/config.json> --type=kubernetes.io/dockerconfigjson\n# \n# Check result with\n# kubectl get secret regcred --output=\"jsonpath={.data.\\.dockerconfigjson}\" | base64 --decode\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-private-reg\nspec:\n  containers:\n  - name: private-reg-container\n    image: k8s.gcr.io/busybox\n  imagePullSecrets:\n  - name: regcred\n"},
  { "name": "üç™ pod wait forever", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  containers:\n  - name: busybox\n    image: busybox:latest\n    command: [ '/bin/bash', '-c', '--' ]\n    args: [ 'while true; do sleep 30; done;' ]\n" },
  { "name": "üìö policies - resource quota", "content": "---\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: myapp-compute-resources\nspec:\n  hard:\n    requests.cpu: \"1\"\n    requests.memory: 1Gi\n    limits.cpu: \"2\"\n    limits.memory: 2Gi\n    requests.nvidia.com/gpu: 4\n# Compute Resource\n# limits.cpu\n# limits.memory\n# requests.cpu\n# requests.memory\n# hugepages-<size>\n# cpu Same as requests.cpu\n# memory Same as requests.memory\n\n# Extended Resource\n# only requests. is available (no limits.)\n# requests.nvidia.com/gpu: 4\n---\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: storage-resources\nspec:\n  hard:\n    requests.storage: \"20\"\n# Storage Resource\n# requests.storage\n# persistentvolumeclaims\n# <storage-class-name>.storageclass.storage.k8s.io/requests.storage\n# <storage-class-name>.storageclass.storage.k8s.io/persistentvolumeclaims\n\n# Ephemeral Storage Resource 1.8 alpha \n# requests.ephemeral-storage\n# limits.ephemeral-storage\n# ephemeral-storage\n---\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: object-counts\nspec:\n  hard:\n    count/configmaps: \"1\"\n    count/deployments.apps: \"1\"\n    count/my-crd.example.com: \"1\"\n# Object Count\n# count/<resource> for resources from the core group\n# count/<resource>.<group> for resources from non-core groups\n\n# Some shorthands can be used (no 'count/' nor .<group>): \n# * configmaps, persistentvolumeclaims, pods, replicationcontrollers, resourcequotas,\n# * services, services.loadbalancers, services.nodeports, namespace and secrets \n"},
  { "name": "üìö policies - quota priority class", "content": "---\n# stable v1.17\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: myapp-pods-high\nspec:\n  hard:\n    cpu: \"1000\"\n    memory: 200Gi\n    pods: \"10\"\n  scopeSelector:\n    matchExpressions:\n    - operator : In\n      scopeName: PriorityClass\n      values: [\"high\"]\n# PriorityClass : \"low\", \"medium\", \"high\"\n# When quota is scoped for priority class using scopeSelector field, quota object is restricted to track only following resources :\n# * pods\n# * cpu\n# * memory\n# * ephemeral-storage\n# * limits.cpu\n# * limits.memory\n# * limits.ephemeral-storage\n# * requests.cpu\n# * requests.memory\n# * requests.ephemeral-storage\n"},
  { "name": "üìö pod qos - BestEffort vs Burstable vs Guaranteed", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-burstable-test-pod\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    resources: # limits != memory plus no cpu \n      limits:\n        memory: \"200Mi\"\n      requests:\n        memory: \"100Mi\"\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-also-burstable-test-pod\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    resources: # limits != memory\n      limits:\n        memory: \"200Mi\"\n        cpu: \"2\"\n      requests:\n        memory: \"100Mi\"\n        cpu: \"1\"\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-guaranteed-test-pod\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    resources: # limits == requests\n      limits:\n        memory: \"200Mi\"\n        cpu: \"2\"\n      requests:\n        memory: \"200Mi\"\n        cpu: \"2\"\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-still-guaranteed-test-pod\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    resources: # non explicit requests => requests = limits\n      limits:\n        memory: \"200Mi\"\n        cpu: \"2\"\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-simply-guaranteed-test-pod\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    resources: # limits == requests\n      limits:\n        memory: \"200Mi\"\n        cpu: \"1.5\" # but no CPU pinning since a fraction\n      requests:\n        memory: \"200Mi\"\n        cpu: \"1.5\"\n"},
  { "name": "üìö policies - resources limit range", "content": "---\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: myapp-limit-range\nspec:\n  limits:\n  - default:\n      memory: 512Mi\n    defaultRequest:\n      memory: 256Mi\n    type: Container"},
  { "name": "üìö pod configuration - secret types", "content": "---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: secret-dockercfg\ntype: kubernetes.io/dockercfg\ndata:\n  .dockercfg: |\n        \"<base64 encoded ~/.dockercfg file>\"\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: secret-basic-auth\ntype: kubernetes.io/basic-auth\nstringData:\n  username: admin\n  password: t0p-Secret\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: secret-ssh-auth\ntype: kubernetes.io/ssh-auth\ndata:\n  # the data is abbreviated in this example\n  ssh-privatekey: |\n          MIIEpQIBAAKCAQEAulqb/Y ...\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: secret-tls\ntype: kubernetes.io/tls\ndata:\n  # the data is abbreviated in this example\n  tls.crt: |\n        MIIC2DCCAcCgAwIBAgIBATANBgkqh ...\n  tls.key: |\n        MIIEpgIBAAKCAQEA7yn3bRHQ5FHMQ ...\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  # Note how the Secret is named\n  name: bootstrap-token-5emitj\n  # A bootstrap token Secret usually resides in the kube-system namespace\n  # namespace: kube-system\ntype: bootstrap.kubernetes.io/token\nstringData:\n  auth-extra-groups: \"system:bootstrappers:kubeadm:default-node-token\"\n  expiration: \"2020-09-13T04:39:10Z\"\n  # This token ID is used in the name\n  token-id: \"5emitj\"\n  token-secret: \"kq4gihvszzgn1p0r\"\n  # This token can be used for authentication\n  usage-bootstrap-authentication: \"true\"\n  # and it can be used for signing\n  usage-bootstrap-signing: \"true\"\n"},
  { "name": "üìö pod configuration - secret volume mount and projection", "content": "---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: myapp-secret\ntype: kubernetes.io/basic-auth\nstringData:\n  username: admin\n  password: t0p-Secret\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-full-secret-volume\nspec:\n  containers:\n  - name: mypod\n    image: k8s.gcr.io/busybox:latest\n    command: [ \"/bin/sh\", \"-c\", \"cat /etc/foo/password; echo ; cat /etc/foo/username\" ]\n    volumeMounts:\n    - name: foo\n      mountPath: \"/etc/foo\"\n      readOnly: true\n  volumes:\n  - name: foo\n    secret:\n      secretName: myapp-secret\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-projected-specific\nspec:\n  containers:\n  - name: mypod\n    image: k8s.gcr.io/busybox:latest\n    command: [ \"/bin/sh\", \"-c\", \"cat /etc/foo/my-group/my-username\" ]\n    volumeMounts:\n    - name: foo\n      mountPath: \"/etc/foo\"\n      readOnly: true\n  volumes:\n  - name: foo\n    secret:\n      secretName: myapp-secret\n      items:\n      - key: username\n        path: my-group/my-username\n  restartPolicy: Never\n" },
  { "name": "üìö pod scheduling - horizontal pod scaler", "content": "---\napiVersion: autoscaling/v2beta2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: myapp-php-apache\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: myapp-php-apache\n  minReplicas: 1\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 50\n  - type: Object\n    object:\n      metric:\n        name: requests-per-second\n      describedObject:\n        apiVersion: networking.k8s.io/v1beta1\n        kind: Ingress\n        name: main-route\n      target:\n        type: Value\n        value: 2k\n  behavior:\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n    scaleUp:\n      stabilizationWindowSeconds: 0\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n      - type: Pods\n        value: 4\n        periodSeconds: 15\n      selectPolicy: Max\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-php-apache\nspec:\n  selector:\n    matchLabels:\n      run: php-apache\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        run: php-apache\n    spec:\n      containers:\n      - name: php-apache\n        image: k8s.gcr.io/hpa-example\n        ports:\n        - containerPort: 80\n        resources:\n          limits:\n            cpu: 500m\n          requests:\n            cpu: 200m\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-php-apache\n  labels:\n    run: php-apache\nspec:\n  ports:\n  - port: 80\n  selector:\n    run: php-apache\n" },
  { "name": "üìö pod scheduling - pod disruption budget", "content": "---\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: myapp-pdb\nspec:\n  minAvailable: 2\n  selector:\n    matchLabels:\n      app: zookeeper\n---\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: myapp-pdb-2\nspec:\n  maxUnavailable: 1\n  selector:\n    matchLabels:\n      app: zookeeper" },
  { "name": "üìö pod configuration - dependent env variables", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-dependent-envars-demo\nspec:\n  containers:\n    - name: dependent-envars-demo\n      args:\n        - while true; do echo -en '\\n'; printf UNCHANGED_REFERENCE=$UNCHANGED_REFERENCE'\\n'; printf SERVICE_ADDRESS=$SERVICE_ADDRESS'\\n';printf ESCAPED_REFERENCE=$ESCAPED_REFERENCE'\\n'; sleep 30; done;\n      command:\n        - sh\n        - -c\n      image: busybox\n      env:\n        - name: SERVICE_PORT\n          value: \"80\"\n        - name: SERVICE_IP\n          value: \"172.17.0.1\"\n        - name: UNCHANGED_REFERENCE\n          value: \"$(PROTOCOL)://$(SERVICE_IP):$(SERVICE_PORT)\"\n        - name: PROTOCOL\n          value: \"https\"\n        - name: SERVICE_ADDRESS\n          value: \"$(PROTOCOL)://$(SERVICE_IP):$(SERVICE_PORT)\"\n        - name: ESCAPED_REFERENCE\n          value: \"$$(PROTOCOL)://$(SERVICE_IP):$(SERVICE_PORT)\"" },
  { "name": "üìö pod configuration - env variables pod fieldRef", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-envars-fieldref\nspec:\n  containers:\n    - name: test-container\n      image: k8s.gcr.io/busybox\n      command: [ \"sh\", \"-c\"]\n      args:\n      - while true; do\n          echo -en '\\n';\n          printenv MY_NODE_NAME MY_POD_NAME MY_POD_NAMESPACE;\n          printenv MY_POD_IP MY_POD_SERVICE_ACCOUNT;\n          sleep 10;\n        done;\n      env:\n        - name: MY_NODE_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.nodeName\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: MY_POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: MY_POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        - name: MY_POD_SERVICE_ACCOUNT\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.serviceAccountName\n  restartPolicy: Never" },
  { "name": "üìö pod configuration - env varariables container fieldRef", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-envars-resourcefieldref\nspec:\n  containers:\n    - name: test-container\n      image: k8s.gcr.io/busybox:1.24\n      command: [ \"sh\", \"-c\"]\n      args:\n      - while true; do\n          echo -en '\\n';\n          printenv MY_CPU_REQUEST MY_CPU_LIMIT;\n          printenv MY_MEM_REQUEST MY_MEM_LIMIT;\n          sleep 10;\n        done;\n      resources:\n        requests:\n          memory: \"32Mi\"\n          cpu: \"125m\"\n        limits:\n          memory: \"64Mi\"\n          cpu: \"250m\"\n      env:\n        - name: MY_CPU_REQUEST\n          valueFrom:\n            resourceFieldRef:\n              containerName: test-container\n              resource: requests.cpu\n        - name: MY_CPU_LIMIT\n          valueFrom:\n            resourceFieldRef:\n              containerName: test-container\n              resource: limits.cpu\n        - name: MY_MEM_REQUEST\n          valueFrom:\n            resourceFieldRef:\n              containerName: test-container\n              resource: requests.memory\n        - name: MY_MEM_LIMIT\n          valueFrom:\n            resourceFieldRef:\n              containerName: test-container\n              resource: limits.memory\n  restartPolicy: Never" },
  { "name": "üìö pod configuration - downward api volumes fieldRef", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-downward-api-volume-example\n  labels:\n    zone: us-est-coast\n  annotations:\n    build: two\nspec:\n  containers:\n    - name: client-container\n      image: k8s.gcr.io/busybox\n      command: [\"sh\", \"-c\"]\n      args:\n      - while true; do\n          grep -H '' /etc/podinfo/*;\n          grep -H '' /etc/containerinfo/*;\n          sleep 30;\n        done;\n      resources:\n        requests:\n          memory: \"32Mi\"\n          cpu: \"125m\"\n      volumeMounts:\n        - name: podinfo\n          mountPath: /etc/podinfo\n        - name: containerinfo\n          mountPath: /etc/containerinfo\n  volumes:\n    - name: podinfo\n      downwardAPI:\n        items:\n          - path: \"labels\"\n            fieldRef:\n              fieldPath: metadata.labels\n          - path: \"annotations\"\n            fieldRef:\n              fieldPath: metadata.annotations\n    - name: containerinfo\n      downwardAPI:\n        items:\n          - path: \"cpu_limit\"\n            resourceFieldRef:\n              containerName: client-container\n              resource: limits.cpu\n              divisor: 1m\n          - path: \"cpu_request\"\n            resourceFieldRef:\n              containerName: client-container\n              resource: requests.cpu\n              divisor: 1m\n          - path: \"mem_limit\"\n            resourceFieldRef:\n              containerName: client-container\n              resource: limits.memory\n              divisor: 1Mi\n          - path: \"mem_request\"\n            resourceFieldRef:\n              containerName: client-container\n              resource: requests.memory\n              divisor: 1Mi" },
  { "name": "üìö pod storage - persistent volume claim", "content": "---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: myapp-pv-claim\nspec:\n  storageClassName: manual\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 3Gi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: task-pv-pod\nspec:\n  volumes:\n    - name: task-pv-storage\n      persistentVolumeClaim:\n        claimName: myapp-pv-claim\n  containers:\n    - name: task-pv-container\n      image: nginx\n      ports:\n        - containerPort: 80\n          name: \"http-server\"\n      volumeMounts:\n        - mountPath: \"/usr/share/nginx/html\"\n          name: task-pv-storage\n" },
  { "name": "üìö pod scheduling - topology constraints", "content": "---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-zone-constraint\nspec:\n  containers:\n    - name: test-container\n      image: k8s.gcr.io/busybox\n  topologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        foo: bar\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-zone-plus-node-constraints\nspec:\n  containers:\n    - name: test-container\n      image: k8s.gcr.io/busybox\n  topologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        foo: bar\n  - maxSkew: 1\n    topologyKey: node\n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        foo: bar\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-exclude-one-zone\nspec:\n  containers:\n    - name: test-container\n      image: k8s.gcr.io/busybox\n  topologySpreadConstraints:\n  - maxSkew: 1\n    topologyKey: zone\n    whenUnsatisfiable: DoNotSchedule\n    labelSelector:\n      matchLabels:\n        foo: bar\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: zone\n            operator: NotIn\n            values:\n            - zoneC\n" }
]
